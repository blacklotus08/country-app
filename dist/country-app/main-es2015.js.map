{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-country/add-country.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/country-detail/country-detail.component.html","webpack:///./src/app/country/country.component.html","webpack:///./src/app/edit-country/edit-country.component.html","webpack:///./src/app/add-country/add-country.component.css","webpack:///./src/app/add-country/add-country.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/async-code-not-taken.validator.ts","webpack:///./src/app/countries.service.ts","webpack:///./src/app/country-detail.service.ts","webpack:///./src/app/country-detail/country-detail.component.css","webpack:///./src/app/country-detail/country-detail.component.ts","webpack:///./src/app/country-edit.guard.ts","webpack:///./src/app/country/country.component.css","webpack:///./src/app/country/country.component.ts","webpack:///./src/app/edit-country/edit-country.component.css","webpack:///./src/app/edit-country/edit-country.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class='card'>\\n  <div class='card-header text-white bg-primary'>\\n    Add Country\\n  </div>\\n  <div class='card-body'>\\n    <form novalidate (ngSubmit)=\\\"save()\\\" [formGroup]=\\\"countryForm\\\">\\n      <div class=\\\"form-group col-md-12 pt-1\\\">\\n        <label for=\\\"country_code\\\">Country Code</label>\\n        <!-- <input type=\\\"text\\\" id=\\\"country_code\\\" name=\\\"country_code\\\" class=\\\"form-control\\\" placeholder=\\\"Country Code\\\"\\n          formControlName=\\\"countryCode\\\" [ngClass]=\\\"{'is-invalid': (countryForm.get('countryCode').touched ||\\n          countryForm.get('countryCode').dirty) &&\\n          !countryForm.get('countryCode').valid }\\\" /> -->\\n          <input type=\\\"text\\\" id=\\\"country_code\\\" name=\\\"country_code\\\" class=\\\"form-control\\\" placeholder=\\\"Country Code\\\"\\n          formControlName=\\\"countryCode\\\" [ngClass]=\\\"{'is-invalid': (countryForm.get('countryCode').touched ||\\n          countryForm.get('countryCode').dirty) &&\\n          !countryForm.get('countryCode').valid }\\\" />\\n        <!-- <input type=\\\"text\\\" id=\\\"country_code\\\" name=\\\"country_code\\\" class=\\\"form-control\\\" placeholder=\\\"Country Code\\\"\\n          formControlName=\\\"countryCode\\\" [ngClass]=\\\"{'is-invalid': codeMessage}\\\" /> -->\\n        <!-- <span class=\\\"invalid-feedback\\\">\\n          {{ codeMessage}}\\n        </span> -->\\n        <span class=\\\"invalid-feedback\\\">\\n          <span *ngIf=\\\"countryForm.get('countryCode').errors?.required\\\">\\n            Please enter country code.\\n          </span>\\n        </span>\\n        <span class=\\\"invalid-feedback\\\">\\n          <span *ngIf=\\\"countryForm.get('countryCode').errors?.record_exist\\\">\\n            Record provided already exist.\\n          </span>\\n        </span>\\n\\n      </div>\\n      <div class=\\\"form-group col-md-12\\\">\\n        <label for=\\\"country_name\\\">Country Name</label>\\n        <input type=\\\"text\\\" required class=\\\"form-control\\\" id=\\\"country_name\\\" name=\\\"country_name\\\"\\n          placeholder=\\\"Country Name\\\" formControlName=\\\"countryName\\\" [ngClass]=\\\"{'is-invalid': (countryForm.get('countryName').touched ||\\n          countryForm.get('countryName').dirty) &&\\n          !countryForm.get('countryName').valid }\\\" />\\n        <span class=\\\"invalid-feedback\\\">\\n          <span *ngIf=\\\"countryForm.get('countryName').errors?.required\\\">\\n            Please enter country name.\\n          </span>\\n        </span>\\n      </div>\\n      <div class=\\\"form-group col-md-12\\\">\\n        <label for=\\\"country_region\\\">Region</label>\\n        <select name=\\\"region\\\" class=\\\"form-control\\\" formControlName=\\\"countryRegion\\\">\\n          <option value=\\\"Africa\\\">Africa</option>\\n          <option value=\\\"Americas\\\">Americas</option>\\n          <option value=\\\"Asia\\\">Asia</option>\\n          <option value=\\\"Europe\\\">Europe</option>\\n          <option value=\\\"Oceania\\\">Oceania</option>\\n        </select>\\n      </div>\\n      <div class=\\\"row justify-content-md-center py-2\\\">\\n        <div class=\\\"col-md-auto\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary mr-1\\\"\\n            [title]=\\\"countryForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'\\\"\\n            [disabled]=\\\"!countryForm.valid\\\">\\n            Save\\n          </button>\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary mr-1\\\" (click)=\\\"goBack();\\\">Cancel</button>\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary mr-1\\\" (click)=\\\"populateTestData()\\\">\\n            Test Data\\n          </button>\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n<br>Dirty: {{ countryForm.dirty }}\\n<br>Touched: {{ countryForm.touched }}\\n<br>Valid: {{ countryForm.get('countryCode').valid }}\\n<br>Value: {{ countryForm.value | json }}\"","module.exports = \"<ngx-spinner bdOpacity=0.9 bdColor=\\\"#91b0dd\\\" size=\\\"large\\\" color=\\\"#ffffff\\\" type=\\\"ball-clip-rotate-multiple\\\"\\n  [fullScreen]=\\\"true\\\">\\n  <p style=\\\"color: white\\\"> Loading... </p>\\n</ngx-spinner>\\n<nav class='navbar navbar-expand navbar-light bg-light'>\\n    <a class='navbar-brand'>{{title}}</a>\\n    <ul class='nav nav-pills'>\\n      <li><a class='nav-link' routerLinkActive='active' [routerLink]=\\\"['/country']\\\">Home</a></li>\\n      <li><a class='nav-link' routerLinkActive='active' [routerLink]=\\\"['/add-country']\\\">Add Country</a></li>\\n    </ul>\\n</nav>\\n<div class='container'>\\n  <router-outlet></router-outlet>\\n</div>\"","module.exports = \"<div class='card'>\\n    <div class='card-header text-white bg-primary'>\\n        Edit Country\\n    </div>\\n    <div class='card-body'>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12 col-md-8\\\">\\n                <h2 *ngIf=\\\"country\\\">\\n                    Country Details\\n                </h2>\\n            </div>\\n            <div class=\\\"col-12 col-md-4\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-secondary float-lg-right\\\" (click)=\\\"goBack();\\\">Back</button>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"col-md-12\\\" *ngFor=\\\"let country of country\\\">\\n            <div class=\\\"row pt-1\\\" *ngIf=\\\"country\\\">\\n                <div class=\\\"col-sm-3 col-md-3 pt-2\\\" *ngIf=\\\"country.flag\\\">\\n                    <img src='{{country.flag}}' style=\\\"height:150px;width:100%;\\\">\\n                </div>\\n                <div class=\\\"col-md pt-2\\\">\\n                    <table class=\\\"table table-responsive\\\">\\n                        <tbody class=\\\"table-bordered\\\">\\n                            <tr *ngIf=\\\"country.name\\\">\\n                                <th>Country Name</th>\\n                                <td><b>{{country.name}}</b></td>\\n                            </tr>\\n                            <tr *ngIf=\\\"country.altSpellings\\\">\\n                                <th>Alt Name</th>\\n                                <td><b>{{country.altSpellings}}</b></td>\\n                            </tr>\\n                            <tr *ngIf=\\\"country.capital\\\">\\n                                <th>Country Capital</th>\\n                                <td><b>{{country.capital}}</b></td>\\n                            </tr>\\n                            <tr *ngIf=\\\"country.alpha3Code\\\">\\n                                <th>Country Code</th>\\n                                <td><b>{{country.alpha3Code}}</b></td>\\n                            </tr>\\n                            <tr *ngIf=\\\"country.region\\\">\\n                                <th>Region</th>\\n                                <td><b>{{country.region}}</b></td>\\n                            </tr>\\n                            <tr *ngIf=\\\"country.population\\\">\\n                                <th>Population</th>\\n                                <td><b>{{country.population}}</b></td>\\n                            </tr>\\n                            <tr *ngIf=\\\"country.population\\\">\\n                                <th>National Language</th>\\n                                <td><b>{{country.demonym}}</b></td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let currency of country.currencies\\\">\\n                                <th>Currency</th>\\n                                <td><b>{{currency.symbol}} , {{currency.code}} , {{currency.name}} </b></td>\\n                            </tr>\\n                            <tr *ngIf=\\\"country.topLevelDomain\\\">\\n                                <th>Country Domain</th>\\n                                <td><b>{{country.topLevelDomain}}</b></td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","module.exports = \"<div class='card'>\\n  <div class='card-header text-white bg-primary'>\\n    List of Countries\\n  </div>\\n  <div class='card-body'>\\n    <div class='row'>\\n      <div class='col-md-1'>Search:</div>\\n      <!-- <div class='col-md'>\\n        <input type='text' [(ngModel)]='listFilter' />\\n      </div> -->\\n      <div class=\\\"input-group col-md\\\">\\n        <input type='text' [(ngModel)]='listFilter' />\\n        <div class=\\\"input-group-append\\\">\\n          <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" #reset (click)=\\\"resetFields()\\\">Reset</button>\\n        </div>\\n      </div>\\n\\n      <div class='col-md-2 offset-md-3'>\\n        <select name=\\\"region\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"regionFilter\\\" (change)=\\\"onChange($event.target.value)\\\">\\n          <option value=\\\"\\\" selected>All</option>\\n          <option value=\\\"Africa\\\">Africa</option>\\n          <option value=\\\"Americas\\\">Americas</option>\\n          <option value=\\\"Asia\\\">Asia</option>\\n          <option value=\\\"Europe\\\">Europe</option>\\n          <option value=\\\"Oceania\\\">Oceania</option>\\n        </select>\\n      </div>\\n    </div>\\n    <div class='table-responsive pt-2'>\\n      <table class=\\\"table\\\">\\n        <thead class=\\\"table-bordered\\\">\\n          <tr>\\n            <th scope=\\\"col\\\">#</th>\\n            <th scope=\\\"col\\\">Code</th>\\n            <th scope=\\\"col\\\">Name</th>\\n            <th scope=\\\"col\\\">Region</th>\\n            <th scope=\\\"col\\\">Options</th>\\n          </tr>\\n        </thead>\\n        <tbody class=\\\"table-bordered\\\">\\n          <tr *ngFor='let country of filteredCountry' style=\\\"cursor: pointer;\\\">\\n            <td routerLink=\\\"/country-detail/{{country.country_name}}\\\">{{country.id}}</td>\\n            <td routerLink=\\\"/country-detail/{{country.country_name}}\\\">{{country.country_code}}</td>\\n            <td routerLink=\\\"/country-detail/{{country.country_name}}\\\">{{country.country_name}}</td>\\n            <td routerLink=\\\"/country-detail/{{country.country_name}}\\\">{{country.country_region}}</td>\\n            <td class=\\\"text-center\\\">\\n              <button class=\\\"btn btn-outline-primary btn-sm mr-1\\\" routerLink=\\\"/edit-country/{{country._id}}\\\">\\n                Edit\\n              </button>\\n              <button class=\\\"btn btn-outline-danger btn-sm\\\" (click)=\\\"deleteCountry(country._id,country)\\\">\\n                Delete\\n              </button>\\n              <!-- <span class=\\\"pr-3\\\" routerLink=\\\"/edit-country/{{country._id}}\\\"><i class=\\\"fa fa-pencil\\\"></i></span>\\n              <span (click)=\\\"deleteCountry(country._id,country)\\\"><i class=\\\"fa fa-times\\\"></i></span> -->\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n\\n    <div class=\\\"col-md-12 d-flex justify-content-between p-1\\\">\\n      <ngb-pagination [collectionSize]=\\\"collectionSize\\\" [(page)]=\\\"page\\\" [pageSize]=\\\"pageSize\\\"></ngb-pagination>\\n\\n      <select class=\\\"custom-select\\\" style=\\\"width: auto\\\" [(ngModel)]=\\\"pageSize\\\">\\n        <option [ngValue]=\\\"5\\\">5</option>\\n        <option [ngValue]=\\\"10\\\">10</option>\\n        <option [ngValue]=\\\"15\\\">15</option>\\n        <option [ngValue]=\\\"20\\\">20</option>\\n      </select>\\n    </div>\\n\\n  </div>\\n</div>\\n<div *ngIf='errorMessage' class='alert alert-danger'>\\n  Error: {{ errorMessage }}\\n</div>\"","module.exports = \"<div class='card'>\\n  <div class='card-header text-white bg-primary'>\\n    Edit Country\\n  </div>\\n  <div class='card-body'>\\n    <form novalidate (ngSubmit)=\\\"saveCountry()\\\" [formGroup]=\\\"countryForm\\\">\\n      <div class=\\\"form-group col-md-12 pt-1\\\">\\n        <label for=\\\"country_code\\\">Country Code</label>\\n        <input type=\\\"text\\\" id=\\\"country_code\\\" name=\\\"country_code\\\" class=\\\"form-control\\\" placeholder=\\\"Country Code\\\"\\n          formControlName=\\\"countryCode\\\" [ngClass]=\\\"{'is-invalid': (countryForm.get('countryCode').touched ||\\n              countryForm.get('countryCode').dirty) &&\\n              !countryForm.get('countryCode').valid }\\\" />\\n        <!-- <input type=\\\"text\\\" id=\\\"country_code\\\" name=\\\"country_code\\\" class=\\\"form-control\\\" placeholder=\\\"Country Code\\\"\\n              formControlName=\\\"countryCode\\\" [ngClass]=\\\"{'is-invalid': codeMessage}\\\" /> -->\\n        <!-- <span class=\\\"invalid-feedback\\\">\\n              {{ codeMessage}}\\n            </span> -->\\n        <span class=\\\"invalid-feedback\\\">\\n          <span *ngIf=\\\"countryForm.get('countryCode').errors?.required\\\">\\n            Please enter country code.\\n          </span>\\n        </span>\\n        <!-- <span class=\\\"invalid-feedback\\\">\\n              <span *ngIf=\\\"countryForm.get('countryCode').errors?.record_exist\\\">\\n                Record provided already exist.\\n              </span>\\n            </span> -->\\n\\n      </div>\\n      <div class=\\\"form-group col-md-12\\\">\\n        <label for=\\\"country_name\\\">Country Name</label>\\n        <input type=\\\"text\\\" required class=\\\"form-control\\\" id=\\\"country_name\\\" name=\\\"country_name\\\"\\n          placeholder=\\\"Country Name\\\" formControlName=\\\"countryName\\\" [ngClass]=\\\"{'is-invalid': (countryForm.get('countryName').touched ||\\n              countryForm.get('countryName').dirty) &&\\n              !countryForm.get('countryName').valid }\\\" />\\n        <span class=\\\"invalid-feedback\\\">\\n          <span *ngIf=\\\"countryForm.get('countryName').errors?.required\\\">\\n            Please enter country name.\\n          </span>\\n        </span>\\n      </div>\\n      <div class=\\\"form-group col-md-12\\\">\\n        <label for=\\\"country_region\\\">Region</label>\\n        <select name=\\\"region\\\" class=\\\"form-control\\\" formControlName=\\\"countryRegion\\\">\\n          <option value=\\\"Africa\\\">Africa</option>\\n          <option value=\\\"Americas\\\">Americas</option>\\n          <option value=\\\"Asia\\\">Asia</option>\\n          <option value=\\\"Europe\\\">Europe</option>\\n          <option value=\\\"Oceania\\\">Oceania</option>\\n        </select>\\n      </div>\\n      <div class=\\\"row justify-content-md-center py-2\\\">\\n        <div class=\\\"col-md-auto\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary mr-1\\\"\\n            [title]=\\\"countryForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'\\\"\\n            [disabled]=\\\"!countryForm.valid\\\">\\n            Save\\n          </button>\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary mr-1\\\" (click)=\\\"goBack();\\\">Cancel</button>\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n</div>\"","module.exports = \".bg-primary {\\r\\n    background-color: #1269c7!important;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYWRkLWNvdW50cnkvYWRkLWNvdW50cnkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG1DQUFtQztBQUN2QyIsImZpbGUiOiJzcmMvYXBwL2FkZC1jb3VudHJ5L2FkZC1jb3VudHJ5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYmctcHJpbWFyeSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTI2OWM3IWltcG9ydGFudDtcclxufSJdfQ== */\"","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { Country } from '../country.model';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\n/*Service*/\nimport { CountriesService } from '../countries.service';\nimport { ValidateIdNotTaken } from '../async-code-not-taken.validator';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-add-country',\n  templateUrl: './add-country.component.html',\n  styleUrls: ['./add-country.component.css']\n})\n\nexport class AddCountryComponent implements OnInit {\n  countryForm: FormGroup;\n  countries: Country[] = [];\n  errorMessage = '';\n  codeMessage: string;\n  private sub: Subscription;\n\n  constructor(private countriesService: CountriesService,\n              private spinner: NgxSpinnerService,\n              private route: ActivatedRoute,\n              private router: Router,\n              private location: Location,\n              private fb: FormBuilder,\n              private toastr: ToastrService\n  ) { }\n\n  ngOnInit() {\n    this.spinner.show();\n    this.countriesService.getCountry().subscribe(\n      countries => {\n        this.countries = countries;\n      },\n      error => this.errorMessage = error as any\n    );\n\n    this.countryForm = this.fb.group({\n      countryCode: ['', [Validators.required]],\n      countryName: ['', Validators.required],\n      countryRegion: 'Africa'\n    });\n\n    this.countryForm.controls.countryCode.setAsyncValidators(ValidateIdNotTaken.createValidator(this.countriesService));\n\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 2000);\n\n  }\n\n  get countryCode() {\n    return this.countryForm.get('countryCode');\n  }\n\n  save() {\n    const countries = {\n      country_code: this.countryForm.get('countryCode').value,\n      country_name: this.countryForm.get('countryName').value,\n      country_region: this.countryForm.get('countryRegion').value,\n    };\n    console.log(JSON.stringify('Save Record:' + countries));\n    this.countriesService.addCountry(countries);\n    this.router.navigate(['/country']);\n    this.toastr.success('Record successfully added.', '',\n      {\n        positionClass: 'toast-top-center',\n        closeButton: true,\n        timeOut: 5000\n      }\n    );\n\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n  populateTestData(): void {\n    this.countryForm.patchValue({\n      countryCode: 'CHN',\n      countryName: 'China'\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {CountryComponent} from './country/country.component';\nimport {CountryDetailComponent} from './country-detail/country-detail.component';\nimport {AddCountryComponent} from './add-country/add-country.component';\nimport {EditCountryComponent} from './edit-country/edit-country.component';\nimport { CountryEditGuard } from './country-edit.guard';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/country', pathMatch: 'full' },\n  { path: 'country' , component : CountryComponent },\n  { path: 'country-detail/:name' , component : CountryDetailComponent },\n  { path: 'add-country' , component : AddCountryComponent },\n  { path: 'edit-country/:id' ,\n    canDeactivate : [CountryEditGuard],\n    component : EditCountryComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n\n})\n\nexport class AppRoutingModule { }\n","module.exports = \".nav-link {\\r\\n    font-size: large;\\r\\n  }\\r\\n  \\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxnQkFBZ0I7RUFDbEIiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5uYXYtbGluayB7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG4gIH1cclxuICAiXX0= */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Country Information App';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';\n\n\n\nimport { AppComponent } from './app.component';\nimport { CountryComponent } from './country/country.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { CountryDetailComponent } from './country-detail/country-detail.component';\nimport { AddCountryComponent } from './add-country/add-country.component';\nimport { EditCountryComponent } from './edit-country/edit-country.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CountryComponent,\n    CountryDetailComponent,\n    AddCountryComponent,\n    EditCountryComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbModule,\n    NgxSpinnerModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot()\n  ],\n  providers: [HttpClient],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","import { AbstractControl } from '@angular/forms';\r\n\r\n/* Service */\r\nimport { CountriesService } from './countries.service';\r\n\r\n/*Model*/\r\nimport { Country } from './country.model';\r\nimport 'rxjs/add/operator/map';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nexport class ValidateIdNotTaken {\r\n  static countries: Country[];\r\n\r\n\r\n  static createValidator(countryService: CountriesService) {\r\n    return (control: AbstractControl) => {\r\n      return countryService.CheckCode(control.value).pipe(debounceTime(1000)).map(res => {\r\n          this.countries = res;\r\n          this.countries = this.countries.filter((country: Country) =>\r\n          (country.country_code === control.value || country.country_code.toLocaleLowerCase === control.value.toLowerCase()));\r\n\r\n          console.log('Response: ' + JSON.stringify(this.countries));\r\n          console.log('Length: ' + JSON.stringify(this.countries.length));\r\n\r\n          if (this.countries.length == 0) {\r\n              console.log('inside');\r\n              return null;\r\n          } else {\r\n            return {record_exist: true};\r\n          }\r\n      });\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap, map, windowCount } from 'rxjs/operators';\n\nimport {Country} from './country.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n\n  baseUrl = 'https://country-41d6.restdb.io/rest/country-header';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'x-apikey' : '5d10446782ef885d6e621bc2',\n      'Content-Type':  'application/json',\n      Authorization: 'my-auth-token'\n    })\n  };\n\n  constructor(private httpService: HttpClient) { }\n  getCountry(): Observable<Country[]>  {\n    return this.httpService.get<Country[]>(this.baseUrl, this.httpOptions).pipe(\n      tap(data => console.log('All: ' + JSON.stringify(data))), catchError(this.handleError)\n    );\n\n    /*this.httpService.get(this.baseUrl,this.httpOptions)\n    .subscribe((countries :Array<any>[]) => {\n      this.countries = countries;\n      this.setLength(countries.length);\n    })\n    ;\n    */\n  }\n\n\n  getCountryById(id): Observable<Country> {\n    console.log(id);\n    return this.httpService.get<Country>(this.baseUrl + '/' + id, this.httpOptions)\n      .pipe(\n        tap(data => console.log('getCountry: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n\n  addCountry(countries) {\n    console.log('Country: ' + JSON.stringify(countries));\n    this.httpService.post(this.baseUrl, countries, this.httpOptions).subscribe(countries);\n    console.log('Record successfully added.');\n  }\n\n  updateCountry(id, countries) {\n    this.httpService.put(this.baseUrl + '/' + id, countries, this.httpOptions).subscribe(countries);\n    this.getCountry();\n    console.log('Record successfully updated.');\n  }\n\n  deleteCountry(id, countries) {\n    this.httpService.delete(this.baseUrl + '/' + id, this.httpOptions).subscribe(countries);\n    console.log('Record successfully deleted.');\n  }\n\n  CheckCode(id) {\n    return this.httpService.get<Country[]>(this.baseUrl, this.httpOptions).pipe(\n      tap(data => console.log('Record Check Code:' + JSON.stringify(data))), catchError(this.handleError)\n    );\n  }\n\n  private handleError(err: HttpErrorResponse) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.error(errorMessage + 'Error');\n    return throwError(errorMessage);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryDetailService {\n  baseUrl = 'https://restcountries.eu/rest/v2/name/';\n\n  public countries: Array<any>[];\n\n\n\n  constructor(private httpService: HttpClient) { }\n\n  getCountryDetail(name) {\n    this.httpService.get(this.baseUrl + name)\n      .subscribe((countries: Array<any>[]) => {\n        this.countries = countries;\n      },\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n            console.log('Client-side error occured.');\n        } else {\n            console.log('Server-side error occured.');\n            this.countries = [];\n        }\n    }\n      );\n  }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n","module.exports = \".bg-primary {\\r\\n    background-color: #1269c7!important;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY291bnRyeS1kZXRhaWwvY291bnRyeS1kZXRhaWwuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG1DQUFtQztBQUN2QyIsImZpbGUiOiJzcmMvYXBwL2NvdW50cnktZGV0YWlsL2NvdW50cnktZGV0YWlsLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYmctcHJpbWFyeSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTI2OWM3IWltcG9ydGFudDtcclxufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { Location } from '@angular/common';\n/*Service*/\nimport { CountryDetailService } from '../country-detail.service';\n\n\n@Component({\n  selector: 'app-country-detail',\n  templateUrl: './country-detail.component.html',\n  styleUrls: ['./country-detail.component.css']\n})\nexport class CountryDetailComponent implements OnInit {\n  constructor(\n    private acttivatedRoute: ActivatedRoute,\n    private countryDetailService: CountryDetailService,\n    private spinner: NgxSpinnerService,\n    private location: Location\n\n  ) { }\n\n  country_name: string;\n  param_name: string;\n\n  ngOnInit() {\n    this.spinner.show();\n\n    setTimeout(() => {\n      this.getCountry();\n    }, 2000);\n\n  }\n\n  getCountry(): void {\n    this.acttivatedRoute.params\n      .subscribe(\n        param => {\n          if (param) {\n            this.countryDetailService.getCountryDetail(param.name);\n            this.spinner.hide();\n          }\n        }\n      );\n  }\n\n  get country(): Array<any>[] {\n    return this.countryDetailService.countries;\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { CanDeactivate } from '@angular/router';\r\nimport { EditCountryComponent } from './edit-country/edit-country.component';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\n\r\nexport class CountryEditGuard implements CanDeactivate<EditCountryComponent> {\r\n    canDeactivate(component: EditCountryComponent): boolean {\r\n        if (component.countryForm.dirty) {\r\n            const countryName = component.countryForm.get('countryName').value;\r\n            return confirm(`Navigate away and lose all changes to ${countryName} record?`);\r\n        }\r\n        return true;\r\n\r\n    }\r\n}\r\n","module.exports = \".img-resize {\\r\\n    height: 100px;\\r\\n}\\r\\n\\r\\nthead {\\r\\n    color: #337AB7;\\r\\n}\\r\\n\\r\\n.bg-primary {\\r\\n    background-color: #1269c7!important;\\r\\n}\\r\\n\\r\\n.btn-primary {\\r\\n    background-color: #1269c7!important;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY291bnRyeS9jb3VudHJ5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFHQTtJQUNJLG1DQUFtQztBQUN2Qzs7QUFFQTtJQUNJLG1DQUFtQztBQUN2QyIsImZpbGUiOiJzcmMvYXBwL2NvdW50cnkvY291bnRyeS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmltZy1yZXNpemUge1xyXG4gICAgaGVpZ2h0OiAxMDBweDtcclxufVxyXG5cclxudGhlYWQge1xyXG4gICAgY29sb3I6ICMzMzdBQjc7XHJcbn1cclxuXHJcblxyXG4uYmctcHJpbWFyeSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTI2OWM3IWltcG9ydGFudDtcclxufVxyXG5cclxuLmJ0bi1wcmltYXJ5IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxMjY5YzchaW1wb3J0YW50O1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit, ViewChild, ElementRef  } from '@angular/core';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router  } from '@angular/router';\n\n/*Model*/\nimport { Country } from '../country.model';\n/*Service*/\nimport { CountriesService } from '../countries.service';\n\n@Component({\n  selector: 'app-country',\n  templateUrl: './country.component.html',\n  styleUrls: ['./country.component.css']\n})\n\nexport class CountryComponent {\n\n  AllCountries: Country[] = [];\n  countries: Country[] = [];\n  errorMessage = '';\n  page = 1;\n  pageSize = 5;\n  collectionSize: number;\n\n  @ViewChild('reset', {static: false}) nameField: ElementRef;\n\n  _listFilter = '';\n  get listFilter(): string {\n    if (this._listFilter == '') {\n      this.countries = this._regionFilter ? this.performFilterbyRegion(this._regionFilter) : this.countries;\n    }\n    return this._listFilter;\n  }\n  set listFilter(value: string) {\n    this._listFilter = value;\n    this.countries = this.AllCountries;\n\n    this.countries = this.listFilter ? this.performFilter(this.listFilter) : this.countries;\n    this.collectionSize = this.countries.length;\n  }\n\n  _regionFilter = '';\n  get regionFilter() {\n    return this._regionFilter;\n  }\n\n  set regionFilter(value: string) {\n    this._regionFilter = value;\n  }\n\n  constructor(private countriesService: CountriesService,\n              private spinner: NgxSpinnerService,\n              private toastr: ToastrService,\n              private router: Router\n  ) { }\n\n  performFilter(filterBy: string): Country[] {\n    console.log(this._regionFilter + 'Region Filter: ');\n    filterBy = filterBy.toLocaleLowerCase();\n    console.log(filterBy + 'Filter');\n\n    if (this._regionFilter == '') {\n      return this.countries.filter((country: Country) =>\n      (country.country_code.toLocaleLowerCase().indexOf(filterBy) !== -1 || country.country_name.toLocaleLowerCase().indexOf(filterBy) !== -1));\n\n    } else {\n      return this.countries.filter((country: Country) =>\n      (country.country_code.toLocaleLowerCase().indexOf(filterBy) !== -1 || country.country_name.toLocaleLowerCase().indexOf(filterBy) !== -1)\n      && country.country_region == this._regionFilter);\n    }\n\n    /* Filter by Search Bar and Drop Down Filter */\n\n  }\n\n  performFilterbyRegion(filterBy: string): Country[] {\n    console.log(filterBy + 'Filter by Region');\n    return this.countries.filter((country: Country) => country.country_region.indexOf(filterBy) !== -1);\n  }\n\n  onChange(deviceValue) {\n    console.log('Inside On Change: ' + deviceValue);\n    this.countries = this.AllCountries;\n    this.countries = deviceValue ? this.performFilterbyRegion(deviceValue) : this.countries;\n    this.collectionSize = this.countries.length;\n  }\n\n  ngOnInit() {\n\n    this.spinner.show();\n\n    this.countriesService.getCountry().subscribe(\n      countries => {\n        this.countries = countries;\n        this.AllCountries = countries;\n        this.collectionSize = this.countries.length;\n        this.spinner.hide();\n      },\n      error => this.errorMessage = error as any\n    );\n  }\n\n  get filteredCountry(): Country[] {\n    return this.countries\n      .map((country, i) => ({ id: i + 1, ...country }))\n      .slice((this.page - 1) * this.pageSize, (this.page - 1) * this.pageSize + this.pageSize);\n  }\n\n  deleteCountry(id) {\n    if (confirm('Are you sure to delete record?')) {\n      this.countriesService.deleteCountry(id, this.countries);\n      this.ngOnInit();\n      this.toastr.success('Record successfully deleted.', '',\n        {\n          positionClass: 'toast-top-center',\n          closeButton: true,\n          timeOut: 5000\n        }\n      );\n\n    }\n  }\n\n  resetFields() {\n    this._regionFilter = '';\n    this._listFilter = '';\n    this.onChange(this._regionFilter);\n    this.nameField.nativeElement.blur();\n\n  }\n}\n","module.exports = \".bg-primary {\\r\\n    background-color: #1269c7!important;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZWRpdC1jb3VudHJ5L2VkaXQtY291bnRyeS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksbUNBQW1DO0FBQ3ZDIiwiZmlsZSI6InNyYy9hcHAvZWRpdC1jb3VudHJ5L2VkaXQtY291bnRyeS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJnLXByaW1hcnkge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzEyNjljNyFpbXBvcnRhbnQ7XHJcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { Observable, Subscription, fromEvent, merge } from 'rxjs';\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\n\nimport { Country } from '../country.model';\n/*Service*/\nimport { CountriesService } from '../countries.service';\n\n\n@Component({\n  selector: 'app-edit-country',\n  templateUrl: './edit-country.component.html',\n  styleUrls: ['./edit-country.component.css']\n})\nexport class EditCountryComponent implements OnInit {\n  countryForm: FormGroup;\n  errorMessage = '';\n  country: Country;\n  countries: Country[] = [];\n  AllCountries: Country;\n  collectionSize: number;\n  private sub: Subscription;\n\n\n  constructor(private acttivatedRoute: ActivatedRoute,\n              private countriesService: CountriesService,\n              private spinner: NgxSpinnerService,\n              private route: ActivatedRoute,\n              private router: Router,\n              private location: Location,\n              private fb: FormBuilder,\n              private toastr: ToastrService\n  ) { }\n\n  ngOnInit(): void {\n    this.countryForm = this.fb.group({\n      countryCode: ['', [Validators.required]],\n      countryName: ['', Validators.required],\n      countryRegion: 'Africa'\n    });\n\n    const param = this.acttivatedRoute.snapshot.paramMap.get('id');\n    this.acttivatedRoute.params\n      .subscribe(\n        param => {\n          if (param) {\n            this.spinner.show();\n            this.getCountry(param.id);\n          }\n        }\n      );\n  }\n\n  getCountry(id): void {\n    this.countriesService.getCountryById(id)\n      .subscribe(\n        (country: Country) => this.displayCountry(country),\n        (error: any) => this.errorMessage = error as any\n      );\n  }\n\n  displayCountry(country: Country): void {\n    console.log(JSON.stringify(country));\n    if (this.countryForm) {\n      this.countryForm.reset();\n    }\n    this.country = country;\n\n    // Update the data on the form\n    this.countryForm.patchValue({\n      countryCode: this.country.country_code,\n      countryName: this.country.country_name,\n      countryRegion: this.country.country_region\n    });\n    this.spinner.hide();\n  }\n\n\n  saveCountry(): void {\n    const param = this.acttivatedRoute.snapshot.paramMap.get('id');\n    this.acttivatedRoute.params\n      .subscribe(\n        param => {\n          if (param) {\n            const countries = {\n              country_code: this.countryForm.get('countryCode').value,\n              country_name: this.countryForm.get('countryName').value,\n              country_region: this.countryForm.get('countryRegion').value,\n            };\n\n            this.countriesService.updateCountry(param.id, countries);\n            this.countriesService.getCountry().subscribe(\n              countries => {\n                this.countries = countries;\n\n              },\n              error => this.errorMessage = error as any\n            );\n            this.router.navigate(['/country']);\n            this.toastr.success('Record successfully updated.', '',\n              {\n                positionClass: 'toast-top-center',\n                closeButton: true,\n                timeOut: 5000\n              }\n            );\n\n\n          }\n        }\n      );\n    // if (this.countryForm.valid) {\n    //   if (this.countryForm.dirty) {\n    //     const p = { ...this.country, ...this.countryForm.value };\n\n    //     if (p.id === 0) {\n\n    //     } else {\n    //       this.countriesService.updateCountry(p)\n    //         .subscribe(\n    //           () => this.onSaveComplete(),\n    //           (error: any) => this.errorMessage = <any>error\n    //         );\n    //     }\n    //   } else {\n    //     this.onSaveComplete();\n    //   }\n    // } else {\n    //   this.errorMessage = 'Please correct the validation errors.';\n    // }\n  }\n\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.countryForm.reset();\n    this.router.navigate(['/country']);\n  }\n\n\n\n\n\n  // updateCountry(id) {\n  // this.countriesService.updateCountry(id, this.countries);\n  // this.countriesService.getCountry().subscribe(\n  //   countries => {\n  //     this.countries = countries;\n\n  //   },\n  //   error => this.errorMessage = <any>error\n  // );\n\n  // }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}